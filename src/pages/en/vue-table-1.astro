---
import BaseLayout from "../../layouts/BaseLayout.astro";
---

<BaseLayout title="Vue table 1">
    <script is:inline slot="head-scripts" src="https://unpkg.com/vue@next"></script>
    <!--
    https://momentjs.com/ check for newer alternatives
    -->
    <script is:inline slot="head-scripts" src="https://unpkg.com/moment@2.29.4/min/moment.min.js"></script>
    <script is:inline slot="head-scripts" src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script is:inline slot="head-scripts" src="https://unpkg.com/nprogress@0.2.0/nprogress.js"></script>
    <div class="inner-container">
        <h1>Vue table</h1>
        <div class="org-vue-datatable" id="table2" v-cloak>
            <input class="table-search-input" v-if="isSearchable" type="search" placeholder="search in table rows"
                   v-model="filter" @input="filteredResults()">
            <p v-if="isSearchable && totalRows > 1 || totalRows == 0">[[totalRows]] results</p>
            <p v-if="isSearchable && totalRows == 1">[[totalRows]] result</p>
            <div class="demo vue-datatable" id="table-vue-requests2" ref="vuetable"
                 :style="{ 'min-height' : this.calcHeight + 'px' }">
                <table class="--striped --responsive xvue-datatable">
                    <thead>
                    <tr v-if="isSortable">
                        <th class="--sort" @click="sort('date')" width="20%"
                            :class="{ '--sorting-active': currentSort == 'date', '--sort-asc': currentSortDir == 'asc' }">
                            Date
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                 fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                 stroke-linejoin="round" class="feather feather-code">
                                <polyline points="16 18 22 12 16 6" id="sort-desc"></polyline>
                                <polyline points="8 6 2 12 8 18" id="sort-asc"></polyline>
                            </svg>
                        </th>
                        <th class="--sort" @click="sort('id')" width="15%"
                            :class="{ '--sorting-active': currentSort == 'id', '--sort-asc': currentSortDir == 'asc' }">
                            Request ID
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                 fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                 stroke-linejoin="round" class="feather feather-code">
                                <polyline points="16 18 22 12 16 6" id="sort-desc"></polyline>
                                <polyline points="8 6 2 12 8 18" id="sort-asc"></polyline>
                            </svg>
                        </th>
                        <th class="--sort" @click="sort('comment')" width="55%"
                            :class="{ '--sorting-active': currentSort == 'comment', '--sort-asc': currentSortDir == 'asc' }">
                            Comment
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                 fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                 stroke-linejoin="round" class="feather feather-code">
                                <polyline points="16 18 22 12 16 6" id="sort-desc"></polyline>
                                <polyline points="8 6 2 12 8 18" id="sort-asc"></polyline>
                            </svg>
                        </th>
                        <th class="--sort" @click="sort('status')" width="10%"
                            :class="{ '--sorting-active': currentSort == 'status', '--sort-asc': currentSortDir == 'asc' }">
                            Status
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                 fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                 stroke-linejoin="round" class="feather feather-code">
                                <polyline points="16 18 22 12 16 6" id="sort-desc"></polyline>
                                <polyline points="8 6 2 12 8 18" id="sort-asc"></polyline>
                            </svg>
                        </th>
                    </tr>
                    <tr v-if="!isSortable"><th width="20%">Date</th><th width="15%">Request ID</th><th width="55%">Comment</th><th width="10%">Status</th></tr></thead>
                    <tbody name="fade" is="transition-group" appear>
                    <tr v-for="request in requests" :key="request.id" @click="rowClick(request.id)" :class="{ '--status-open' : request.status == 'open', '--status-closed' : request.status == 'closed' }">
                        <td data-heading="Date">[[formatDate(request.date)]]</td>
                        <td data-heading="Request ID">[[request.id]]</td>
                        <td data-heading="Comment">[[request.comment]]</td>
                        <td data-heading="Status">[[request.status]]</td>
                    </tr>
                    </tbody>
                </table>
            </div>
            <nav class="molecule-pagination" v-show="numPages > 1">
            <span class="molecule-pagination__link molecule-pagination__link--prev --state-disabled" v-if="currentPage == 1">
                <svg width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <use xlink:href="/static/std/assets/toolkit/images/svg/feather-sprite.svg#chevrons-left"></use>
                </svg>
            </span>
                <a class="molecule-pagination__link molecule-pagination__link--prev" href="#" @click.prevent="gotoPage(1)" v-else>
                    <svg width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <use xlink:href="/static/std/assets/toolkit/images/svg/feather-sprite.svg#chevrons-left"></use>
                    </svg>
                </a>
                <span class="molecule-pagination__link molecule-pagination__link--prev --state-disabled" v-if="currentPage == 1">
                <svg class="icon" fill="currentColor">
                    <use xlink:href="/static/std/assets/toolkit/images/svg/sh-svgsprite.svg#chevron_left-24px"></use>
                </svg>
            </span>
                <a class="molecule-pagination__link molecule-pagination__link--prev" href="#" @click.prevent="gotoPage(currentPage-1)" v-else>
                    <svg class="icon" fill="currentColor">
                        <use xlink:href="/static/std/assets/toolkit/images/svg/sh-svgsprite.svg#chevron_left-24px"></use>
                    </svg>
                </a>
                <a class="molecule-pagination__link molecule-pagination__page" href="#" v-show="currentPage == numPages && numPages > 4" @click.prevent="gotoPage(currentPage-4)">[[currentPage-4]]</a><a class="molecule-pagination__link molecule-pagination__page" href="#" v-show="currentPage == numPages && numPages >= 4 || currentPage == numPages - 1 && numPages > 4" @click.prevent="gotoPage(currentPage-3)">[[currentPage-3]]</a><a class="molecule-pagination__link molecule-pagination__page" href="#" v-show="currentPage > 2 && numPages > 2" @click.prevent="gotoPage(currentPage-2)">[[currentPage-2]]</a><!-- left of current page -1. only if not currentPage itself and numPages > 1--><a class="molecule-pagination__link molecule-pagination__page" href="#" v-show="currentPage > 1 && numPages > 1" @click.prevent="gotoPage(currentPage-1)">[[currentPage-1]]</a><!-- current page button--><a class="molecule-pagination__currentpage" href="#">[[currentPage]]</a><!-- right of current page +1. only if not currentPage itself and currentPage is < numPages--><a class="molecule-pagination__link molecule-pagination__page" href="#" v-show="currentPage > 0 && currentPage < numPages" @click.prevent="gotoPage(currentPage+1)">[[currentPage+1]]</a><a class="molecule-pagination__link molecule-pagination__page" href="#" v-show="currentPage > 0 && currentPage < numPages - 1" @click.prevent="gotoPage(currentPage+2)">[[currentPage+2]]</a><a class="molecule-pagination__link molecule-pagination__page" href="#" v-show="currentPage < 3 && currentPage + 3 <= numPages" @click.prevent="gotoPage(currentPage+3)">[[currentPage+3]]</a><a class="molecule-pagination__link molecule-pagination__page" href="#" v-show="currentPage == 1 && numPages > 4" @click.prevent="gotoPage(currentPage+4)">[[currentPage+4]]</a>
                <span class="molecule-pagination__link molecule-pagination__link--next --state-disabled" v-if="currentPage == numPages">
                <svg class="icon" fill="currentColor">
                    <use xlink:href="/static/std/assets/toolkit/images/svg/sh-svgsprite.svg#chevron_right-24px"></use>
                </svg>
            </span>
                <a class="molecule-pagination__link molecule-pagination__link--next" href="#" @click.prevent="gotoPage(currentPage+1)" v-else>
                    <svg class="icon" fill="currentColor">
                        <use xlink:href="/static/std/assets/toolkit/images/svg/sh-svgsprite.svg#chevron_right-24px"></use>
                    </svg>
                </a>
                <!-- last page button--><!-- only show when there are 5 or more pages-->
                <span class="molecule-pagination__link molecule-pagination__link--next --state-disabled" v-if="currentPage == numPages">
                <svg width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <use xlink:href="/static/std/assets/toolkit/images/svg/feather-sprite.svg#chevrons-right"></use>
                </svg>
            </span>
                <a class="molecule-pagination__link molecule-pagination__link--next" href="#" @click.prevent="gotoPage(numPages)" v-else>
                    <svg width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <use xlink:href="/static/std/assets/toolkit/images/svg/feather-sprite.svg#chevrons-right"></use>
                    </svg>
                </a>
            </nav>
            <section v-show="errored">
                <p>We're sorry, we're not able to retrieve this information at the moment, please try back later</p>
            </section>
        </div>
    </div>
    <script is:inline slot="footer-scripts">
        const table2 = {
            delimiters: ['[[', ']]'],
            data() {
                return {
                    requests: [],
                    isSearchable: true,
                    isSortable: true,
                    currentSort: 'date',
                    currentSortDir: 'desc',
                    pageSize: 4,
                    currentPage: 1,
                    filter: '',
                    filterResultsLength: null,
                    calcHeight: 0,
                    errored: false,
                    totalRows: 0
                }
            },
            methods: {
                formatDate(value) {
                    return moment(value).format('DD-MM-YYYY');
                },
                getDataFromAPI(url) {
                    NProgress.configure({parent: '.inner-container'});
                    NProgress.start()
                    axios
                        .get(url)
                        .then(response => {
                            this.requests = response.data
                            NProgress.done()
                            this.totalRows = response.headers["x-total-count"]
                            this.setMinHeight();
                        })
                        .catch(error => {
                            console.log(error)
                            this.errored = true
                        })
                },
                sort: function (s) {
                    //if s == current sort, reverse
                    if (s === this.currentSort) {
                        this.currentSortDir = this.currentSortDir === 'asc' ? 'desc' : 'asc';
                    }
                    this.currentSort = s;
                    this.currentPage = 1;
                    console.log(this.currentSort);
                    // get sorted data
                    // if filtered
                    if (this.filter !== '') {
                        const url = "https://my-json-server.typicode.com/studio-henk/sh-apis/requests?_sort=" + this.currentSort + "&_order=" + this.currentSortDir + "&_page=1&_limit=" + this.pageSize + "&q=" + this.filter;
                        this.getDataFromAPI(url);
                    } else {
                        const url = "https://my-json-server.typicode.com/studio-henk/sh-apis/requests?_sort=" + this.currentSort + "&_order=" + this.currentSortDir + "&_page=1&_limit=" + this.pageSize;
                        this.getDataFromAPI(url);
                    }
                },
                prevPage: function () {
                    if (this.currentPage > 1) this.currentPage--;
                    if (this.currentPage != 1) {
                        const url = "https://my-json-server.typicode.com/studio-henk/sh-apis/requests?_sort=" + this.currentSort + "&_order=" + this.currentSortDir + "&_page=" + this.currentPage + "&_limit=" + this.pageSize;
                        this.getDataFromAPI(url);
                    }
                },
                nextPage: function () {
                    if ((this.currentPage * this.pageSize) < this.totalRows) this.currentPage++;
                    if (this.currentPage <= this.numPages) {
                        const url = "https://my-json-server.typicode.com/studio-henk/sh-apis/requests?_sort=" + this.currentSort + "&_order=" + this.currentSortDir + "&_page=" + this.currentPage + "&_limit=" + this.pageSize;
                        this.getDataFromAPI(url);
                    }
                },
                gotoPage: function (pageNum) {
                    console.log('gotoPage says: ' + pageNum);
                    this.currentPage = pageNum;
                    const url = "https://my-json-server.typicode.com/studio-henk/sh-apis/requests?_sort=" + this.currentSort + "&_order=" + this.currentSortDir + "&_page=" + this.currentPage + "&_limit=" + this.pageSize + "&q=" + this.filter;
                    this.getDataFromAPI(url);
                },
                rowClick: function (reqID) {
                    console.log(reqID);
                    location = "request-detail.html";
                },
                setMinHeight() {
                    console.log('setting height on table');
                    let tableHeight = this.$refs.vuetable.clientHeight;
                    //- console.log(calcHeight);
                    this.calcHeight = tableHeight + 2;
                    return this.calcHeight;
                    //- this.$refs.vuetable.....
                },
                filteredResults: function () {
                    if (this.filter !== '') {
                        const url = "https://my-json-server.typicode.com/studio-henk/sh-apis/requests?_sort=" + this.currentSort + "&_order=" + this.currentSortDir + "&_page=1&_limit=" + this.pageSize + "&q=" + this.filter;
                        this.getDataFromAPI(url);
                        this.currentPage = 1;
                    } else {
                        const url = "https://my-json-server.typicode.com/studio-henk/sh-apis/requests?_sort=" + this.currentSort + "&_order=" + this.currentSortDir + "&_page=1&_limit=" + this.pageSize;
                        this.getDataFromAPI(url);
                        this.currentPage = 1;
                    }
                }
            },
            computed: {
                numResults: function () {
                    //- if(this.filter !== '') {
                    //-   this.currentPage = 1;
                    //-   return this.filterResultsLength;
                    //- } else {
                    //-   return this.requests.length;
                    //- }
                    return this.requests.length;
                },
                numPages: function () {
                    // this can't be less than 1
                    return Math.ceil(this.totalRows / this.pageSize);
                }
            },
            created() {
                const url = "https://my-json-server.typicode.com/studio-henk/sh-apis/requests?_sort=" + this.currentSort + "&_order=" + this.currentSortDir + "&_page=1&_limit=" + this.pageSize;
                NProgress.configure({parent: '.inner-container'});
                NProgress.start()
                axios
                    .get(url)
                    .then(response => {
                        this.requests = response.data
                        NProgress.done()
                        this.totalRows = response.headers["x-total-count"]
                    })
                    .catch(error => {
                        console.log(error)
                        this.errored = true
                    })
            }
        }

        Vue.createApp(table2).mount('#table2')
    </script>
</BaseLayout>
<style>
    .inner-container {
        max-width: 60em;
        margin: 0 auto;
        padding: 2rem 1rem 0 1rem;
    }

    .inner-container > h1 {
        border-bottom: 1px solid #eeeeee;
        line-height: 54px;
        margin-bottom: 2rem;
    }

/* nprogress */
    /* Make clicks pass-through */
    #nprogress {
        pointer-events: none;
    }

    #nprogress .bar {
        background: red;
        position: fixed;
        z-index: 1031;
        top: 0;
        left: 0;
        width: 100%;
        height: 2px;
    }

    /* Fancy blur effect */
    #nprogress .peg {
        display: block;
        position: absolute;
        right: 0px;
        width: 100px;
        height: 100%;
        box-shadow: 0 0 10px #29d, 0 0 5px #29d;
        opacity: 1.0;

        -webkit-transform: rotate(3deg) translate(0px, -4px);
        -ms-transform: rotate(3deg) translate(0px, -4px);
        transform: rotate(3deg) translate(0px, -4px);
    }

    /* Remove these to get rid of the spinner */
    #nprogress .spinner {
        display: block;
        position: fixed;
        z-index: 1031;
        top: 25%;
        left: 50%;
    }

    #nprogress .spinner-icon {
        width: 18px;
        height: 18px;
        box-sizing: border-box;

        border: solid 2px transparent;
        border-top-color: red;
        border-left-color: green;
        border-radius: 50%;

        -webkit-animation: nprogress-spinner 400ms linear infinite;
        animation: nprogress-spinner 400ms linear infinite;
    }

    .nprogress-custom-parent {
        overflow: hidden;
        position: relative;
    }

    .nprogress-custom-parent #nprogress .spinner,
    .nprogress-custom-parent #nprogress .bar {
        position: absolute;
    }

    @-webkit-keyframes nprogress-spinner {
        0%   { -webkit-transform: rotate(0deg); }
        100% { -webkit-transform: rotate(360deg); }
    }
    @keyframes nprogress-spinner {
        0%   { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    input[type=text], input[type=email], input[type=tel], input[type=password], input[type=search] {
        width: 100%;
        padding: 14px 8px;
        line-height: 24px;
        border: 1px solid #000;
        font-family: "ff-scala-sans-pro",sans-serif;
        outline-color: #b6a58d;
    }

    .table-search-input[type=search] {
        border-color: #d3d3d3;
    }

    [type=search]::-webkit-search-cancel-button, [type=search]::-webkit-search-decoration {
        -webkit-appearance: auto;
    }

    ::placeholder {
        color: #d3d3d3 !important;
    }

    ::-webkit-input-placeholder {
        color: #d3d3d3 !important;
    }

    label, input {
        box-sizing: border-box;
        display: block;
    }

    table {
        width: 100%;
        margin: 0;
        border-collapse: collapse;
        box-sizing: border-box;
        background-color: #fff;
    }

    table th {
        text-align: left;
        font-weight: 400;
        border-bottom: 1px solid #d3d3d3;
        white-space: nowrap;
        vertical-align: middle;
        line-height: 1;
        padding: 30px 8px 10px 8px;
    }

    table td {
        vertical-align: top;
        line-height: 1.6;
        margin: 0;
        padding: 14px 8px 15px 8px;
    }

    td[data-heading=Status] {
        white-space: nowrap;
    }

    .org-vue-datatable {
        margin-bottom: 5rem;
    }

    .org-vue-datatable .vue-datatable {
        border: 1px solid hsla(0deg, 0%, 92%, 1);
    }

    .org-vue-datatable tbody {
        margin: 0;
    }

    .org-vue-datatable[v-cloak] {
        display: none;
    }

    .vue-datatable th.--sort, .vue-datatable tbody tr {
        cursor: pointer;
    }

    .--striped tbody tr:nth-child(even) {
        background-color: #f8f8f8;
    }

    table.--striped tr+tr td, table.--rows-table tr+tr td {
        border-color: transparent;
    }
    table tr+tr td {
        border-top: 1px solid #d3d3d3;
    }

    .--sort.--sorting-active {
        border-color: #b6a58d;
        border-width: 2px;
    }
    .--sort {
        position: relative;
    }

    .--sort svg {
        width: 18px;
        height: 18px;
        -webkit-transform: rotate(90deg);
        transform: rotate(90deg);
        position: absolute;
        right: 8px;
        top: 28px;
        color: #d3d3d3;
    }

    .--sort.--sorting-active #sort-desc {
        color: #b6a58d;
    }

    .--sort.--sort-asc #sort-desc {
        color: #d3d3d3;
    }

    .--sort.--sorting-active.--sort-asc #sort-asc {
        color: #b6a58d;
    }

    .molecule-pagination {
        display: -webkit-flex;
        display: flex;
        -webkit-justify-content: center;
        justify-content: center;
        -webkit-align-items: center;
        align-items: center;
        margin: 2rem auto;
        transition: all .3s ease-in-out;
    }

    .molecule-pagination__link {
        margin: 0;
        -webkit-flex: 0 0 40px;
        flex: 0 0 40px;
        padding: 8px 0;
        text-align: center;
        text-decoration: none;
        transition: all .3s ease-in-out;
        line-height: 24px;
        font-family: monospace;
    }

    .molecule-pagination__link--prev, .molecule-pagination__link--next {
        background-color: #f8f8f8;
        border-radius: 50%;
    }

    .molecule-pagination .--state-disabled {
        cursor: not-allowed;
        opacity: .25;
    }

    .molecule-pagination__link>svg {
        display: block;
        margin: 0 auto;
    }

    .molecule-pagination__page {
        border-radius: 50%;
    }

    .molecule-pagination__currentpage {
        background: #000;
        color: #fff;
        border-radius: 100%;
        margin: 0;
        -webkit-flex: 0 0 40px;
        flex: 0 0 40px;
        text-align: center;
        padding: 8px 0;
        text-decoration: none;
        cursor: default;
        font-family: monospace;
        line-height: 24px;
    }
</style>